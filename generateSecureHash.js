// generateSecureHash.js - Generador de hash seguro para contrase√±as
const bcrypt = require('bcryptjs');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

async function generateSecureHash() {
  console.log('üîê Generador de Hash Seguro para Piuma Admin\n');
  console.log('Este script te ayudar√° a generar un hash seguro para tu contrase√±a de administrador.\n');
  
  // Solicitar nueva contrase√±a
  const password = await new Promise((resolve) => {
    rl.question('Ingresa la nueva contrase√±a de administrador (m√≠nimo 8 caracteres): ', (input) => {
      resolve(input.trim());
    });
  });

  // Validaciones b√°sicas
  if (password.length < 8) {
    console.log('‚ùå La contrase√±a debe tener al menos 8 caracteres');
    rl.close();
    return;
  }

  if (password.toLowerCase().includes('admin') || password === '12345678' || password === 'password') {
    console.log('‚ùå La contrase√±a es muy com√∫n. Usa algo m√°s seguro.');
    rl.close();
    return;
  }

  try {
    // Generar hash con salt rounds altos para mayor seguridad
    const saltRounds = 12;
    console.log('\n‚è≥ Generando hash seguro...');
    
    const hash = await bcrypt.hash(password, saltRounds);
    
    console.log('\n‚úÖ Hash generado exitosamente!\n');
    console.log('üìã Variables para tu archivo .env.local:');
    console.log('‚îÄ'.repeat(60));
    console.log(`ADMIN_USERNAME=admin`);
    console.log(`ADMIN_PASSWORD_HASH="${hash}"`);
    console.log('‚îÄ'.repeat(60));
    
    // Verificar que funciona correctamente
    const isValid = await bcrypt.compare(password, hash);
    console.log('\nüîç Verificaci√≥n del hash:', isValid ? '‚úÖ Correcto' : '‚ùå Error');
    
    console.log('\nüìù Pasos siguientes:');
    console.log('1. Copia las variables de arriba a tu archivo .env.local');
    console.log('2. Actualiza tu archivo api/auth.js para usar estas variables');
    console.log('3. Reinicia tu servidor de desarrollo');
    console.log('4. Prueba el login con tu nueva contrase√±a');
    
    // Mostrar ejemplo de uso en Vercel
    console.log('\nüöÄ Para Vercel (Producci√≥n):');
    console.log('Ve a tu dashboard de Vercel > Settings > Environment Variables');
    console.log('Y agrega las mismas variables de arriba.');
    
  } catch (error) {
    console.error('‚ùå Error generando hash:', error.message);
  }
  
  rl.close();
}

// Ejecutar solo si es llamado directamente
if (require.main === module) {
  generateSecureHash().catch(console.error);
}

module.exports = { generateSecureHash };